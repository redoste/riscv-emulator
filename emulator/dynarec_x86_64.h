#ifndef DYNAREC_X86_64_H
#define DYNAREC_X86_64_H

#ifdef RISCV_EMULATOR_DYNAREC_X86_64_SUPPORT

#ifndef __x86_64__
#pragma GCC error "dynarec is only supported on x86-64"
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>

#include "emulator.h"
#include "isa.h"

/* dr_x86_code_t : structure storing informations about some pre-assembled x86-64
 *                 code matching a RISC-V instruction
 */
typedef struct dr_x86_code_t {
	uint8_t* code;
	size_t code_size;
	ssize_t rs1_reloc;
	ssize_t rs2_reloc;
	ssize_t rd_reloc;
	ssize_t imm_reloc;
} dr_x86_code_t;

/* DYNAREC_PAGE_SIZE : size of a single page of x86-64 code, here we assume pages are 4KiB
 *                     (and on x86-64 it's always the case)
 */
#define DYNAREC_PAGE_SIZE 0x1000

/* DYNAREC_PROLOGUE_SIZE : size of the prologue code that the function emitting code will
 *                         guarantee to keep available
 */
#define DYNAREC_PROLOGUE_SIZE 3

/* dr_block_t : structure storing informations about a block of code being emitted
 */
typedef struct dr_block_t {
	uint8_t* page;
	size_t pos;
	guest_reg pc;
} dr_block_t;

/* dr_emit_block : emit a block of x86-64 code
 *                 returns true if some x86-64 code was added to the instruction cache
 *                 returns false otherwise
 *     emulator_t* emu  : pointer to the emulator
 *     guest_paddr base : base RISC-V program counter of the block to emit
 */
bool dr_emit_block(emulator_t* emu, guest_paddr base);

/* DR_X86_X : dr_x86_code_t corresponding to the RISC-V instruction X
 *            these arrays are generated by the code generator in dynarec_x86_64_codegen/
 */
#define X(MNEMONIC)                         extern const dr_x86_code_t DR_X86_##MNEMONIC[];
#define X_R(MNEMONIC, OPCODE, F3, F7, EXPR) X(MNEMONIC)
#define X_I(MNEMONIC, OPCODE, F3, EXPR)     X(MNEMONIC)
#define X_S(MNEMONIC, OPCODE, F3, EXPR)     X(MNEMONIC)
#define X_B(MNEMONIC, OPCODE, F3, EXPR)     X(MNEMONIC)
#define X_U(MNEMONIC, OPCODE, EXPR)         X(MNEMONIC)
#define X_J(MNEMONIC, OPCODE, EXPR)         X(MNEMONIC)
X_INSTRUCTIONS
#undef X
#undef X_R
#undef X_I
#undef X_S
#undef X_B
#undef X_U
#undef X_J

#endif

#endif
